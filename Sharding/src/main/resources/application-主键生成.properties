# 打印SQL
spring.shardingsphere.props.sql-show = true
spring.main.allow-bean-definition-overriding = true

# ----------------数据源配置
# 指定对应的库
spring.shardingsphere.datasource.names=m1

spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/coursedb?serverTimezone=UTC
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=root
#------------------------分布式序列算法配置
# 分布式序列算法类型 NANOID，UUID: String类型，
#spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type=NANOID
#spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type=UUID
# 雪花算法，生成Long类型主键。
spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.props.worker.id=1
# 据说性能更快
#spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type=COSID_SNOWFLAKE
# 集成COSID，分发主键
# 还需要添加注解
# @EnableConfigurationProperties({MachineProperties.class})
# @ComponentScans(value = {@ComponentScan("me.ahoo.cosid")})
#spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type=COSID
#cosid.machine.enabled=true
#cosid.machine.distributor.manual.machine-id=1
#cosid.snowflake.enabled=true
# 扩展自定义的分布式主键生成策略
#spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type=MYKEY
# 分布式序列算法属性配置
#------------------------指定分布式主键生成策略
spring.shardingsphere.rules.sharding.tables.course.key-generate-strategy.column=cid
spring.shardingsphere.rules.sharding.tables.course.key-generate-strategy.key-generator-name=course_cid_alg

